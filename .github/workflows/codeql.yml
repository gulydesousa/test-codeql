name: "MyCodeQL Analysis"

on:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ['csharp']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x' # Asegúrate de ajustar esto a la versión de .NET que tu proyecto requiere

    - name: Restore dependencies
      run: dotnet restore

    - name: Build the project
      run: dotnet build --no-restore -c Release

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: +./mi-codeql/csharp-queries.qls # Añade la ruta a tu suite de consulta personalizada

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        # Opcionalmente, puedes especificar la ubicación de salida del archivo SARIF
        output: sarif-result/codeql-results.sarif
    - name: Emit warnings for CodeQL findings
      run: |
        SARIF_FILE="sarif-result/codeql-results.sarif" # Actualiza con la ubicación real de tu archivo SARIF
          # Asegúrate de que jq está instalado o instálalo
          sudo apt-get install jq
          # Extrae y muestra advertencias para cada coincidencia
          jq -r '.runs[].results[] | "\(.ruleId) \(.message.text)"' $SARIF_FILE | while read -r line; do
            echo "::warning file=$(jq -r '.locations[0].physicalLocation.artifactLocation.uri' <<< "$line"),line=$(jq -r '.locations[0].physicalLocation.region.startLine' <<< "$line")::$(jq -r '.message.text' <<< "$line")"
          done
